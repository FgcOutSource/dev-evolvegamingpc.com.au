{%- if section.settings.background_type == 'boxed' -%}
  {%- assign is_boxed = true -%}
{%- else -%}
  {%- assign is_boxed = false -%}
{%- endif -%}

{%- if section.settings.background != settings.background and section.settings.background != 'rgba(0,0,0,0)' -%}
  {%- assign blends_with_background = false -%}
{%- else -%}
  {%- assign blends_with_background = true -%}
{%- endif -%}

<style>
  #shopify-section-{{ section.id }} {
    {%- if section.settings.background == 'rgba(0,0,0,0)' -%}
      {%- assign section_background = settings.background -%}
    {%- else -%}
      {%- assign section_background = section.settings.background -%}
    {%- endif -%}

    {%- if section.settings.text_color == 'rgba(0,0,0,0)' -%}
      {%- assign heading_color = settings.heading_color -%}
      {%- assign text_color = settings.text_color -%}
    {%- else -%}
      {%- assign heading_color = section.settings.text_color -%}
      {%- assign text_color = section.settings.text_color -%}
    {%- endif -%}

    --heading-color: {{ heading_color.red }}, {{ heading_color.green }}, {{ heading_color.blue }};
    --text-color: {{ text_color.red }}, {{ text_color.green }}, {{ text_color.blue }};

    --section-background: {{ section_background.red }}, {{ section_background.green }}, {{ section_background.blue }};
  }
</style>

<style>
.next-tips{
	display: none;
}

.color-container {  
  margin-bottom: 20px;  
}  

.color-container{
    -webkit-user-select: none;
    user-select: none;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    flex-wrap: wrap;
    margin: 20px 0 40px;
}
  
.color-container .main-color{  
  text-align: center;
  vertical-align: top;
  cursor: pointer;
  position: relative;
  padding: 5px;
  width: 64px;
  height: 64px;
}

.color-container .main-color img{
  max-width: 100%;
  max-height: 100%;
  object-fit: cover;
  border-radius: 9999px;
  border: 2px solid black;
}
.color-container .main-color.active img{
  border: 2px solid #fff;
}
.color-container .main-color.active:after{
  display:inline-block;
  content:"";
  width: 40px;
  height: 40px;
  text-shadow: #000 0 0 5px;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: url({{ 'check.svg' | asset_url }});
  background-size: cover;

}
  
.sub-color-container {  
  margin-top: 10px; 
  -webkit-user-select: none;
  user-select: none;
}  
  
.sub-color-container .sub-color{  
  display: inline-block;
  padding: 5px;
  margin-bottom: 5px;  
  cursor: pointer;
  position: relative;
  width: 40px;
  height: 212px;
  text-align: center;
}	

.sub-color-container .sub-color img{
  max-width: 100%;
  max-height: 100%;
  object-fit: cover;
  border: 2px solid black;
}
.sub-color-container .sub-color.active img{
  border: 2px solid #fff;
}
.sub-color-container .sub-color.active:after{
  display:inline-block;
  content:"";
  width: 23px;
  height: 23px;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: url({{ 'check.svg' | asset_url }});
  background-size: cover;

}


</style>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>  
<script>
	$(document).ready(function() {

    var colors_array = [];

    $('.cables-colors-data').each(function(index) {  
        // 创建一个空对象来存储section的数据  
        var colors_data = {};

        var id = $(this).find('.main-color').data('id'); // 获取data-id属性的值  
        var title = $(this).find('.main-color').data('title');
        var img = $(this).find('.main-color').data('img');
          
        // 将这些数据添加到colors_data对象中  
        colors_data.id = id;  
        colors_data.title = title;
        colors_data.img = img;
        colors_data.sub_color = [];

        var that = $(this);
        that.find('.sub-color').each(function(i){
          var sub_color_data = {};
          // 假设每个section都有一个data-id属性和一个子元素p来存储文本  
          var id = $(this).data('id'); // 获取data-id属性的值  
          var title = $(this).data('title');
          var img = $(this).data('img');
            
          // 将这些数据添加到colors_data对象中  
          sub_color_data.id = id;  
          sub_color_data.title = title;
          sub_color_data.img = img;

          colors_data.sub_color.push(sub_color_data);

        })

        // 将sectionData对象添加到数组中  
        colors_array.push(colors_data);  
    });

    //console.log(colors_array);
    

   // 创建一个Map来存储已经合并的对象  
    const mergedMap = new Map();  
      
    // 遍历数组  
    colors_array.forEach(obj => {  
      const id = obj.id;  
        
      // 如果Map中还没有这个id，则直接添加  
      if (!mergedMap.has(id)) {  
        mergedMap.set(id, { ...obj }); // 使用展开运算符来复制对象  
      } else {  
        // 如果已经存在，则合并属性  
        const mergedObj = mergedMap.get(id);  
          
        // 遍历当前对象的属性  
        for (const key in obj) {  
          if (obj.hasOwnProperty(key)) {  
            // 如果属性是数组，则进行连接  
            if (Array.isArray(obj[key])) {
              if (!Array.isArray(mergedObj[key])) {  
                mergedObj[key] = [];  
              }  
              mergedObj[key] = [...mergedObj[key], ...obj[key]];  
            } else {  
              // 否则，直接覆盖或合并（如果是对象，可能需要深度合并）  
              //mergedObj[key] = obj[key];
            }  
          }  
        }  
      }  
    });  
  
    // 将Map转换回数组  
    const mergedArray = Array.from(mergedMap.values());
    //console.log(mergedArray);
    
    if(mergedArray.length>0){
      var main_color = '';
      var sub_color = '';

      mergedArray.forEach(function(v){

        main_color += `<div class="main-color" data-color-id="main_id_${v.id}" title="${v.title}"><img src="${v.img}"/></div>`;

        var sub_color_item = '';

        v.sub_color.forEach(function(vv){
            sub_color_item += `<div class="sub-color" data-color-id="main_id_${v.id}_${vv.id}" title="${vv.title}"><img src="${vv.img}"/></div>`;
        })

        sub_color += `<div class="sub-color-container" id="main_id_${v.id}-subcolors" style="display: none;">${sub_color_item}</div>`;

      })

      $('#color-container').html(main_color);
      $('#sub-color-container').html(sub_color);

      //console.log(sub_color);

    }

    var i = null;
	  $('.main-color').click(function() {
      $(this).addClass('active').siblings().removeClass('active');

	    var mainColorId = $(this).data('color-id');  
	    $('.sub-color-container').hide(); // 隐藏所有子颜色容器
	    $('.next-tips').show();
	    $('#' + mainColorId + '-subcolors').show(); // 显示与主颜色ID匹配的子颜色容器

      var index = $(this).index();
      if(i !== index){
        i = index;
        $('.sub-color-container .sub-color').removeClass('active');
      }

	  });

    $('.sub-color-container .sub-color').click(function(){
      $(this).addClass('active').siblings().removeClass('active'); 
    })

	});
</script> 

<section class="{% if section.settings.add_vertical_spacing %}section{% endif %} {% unless blends_with_background or is_boxed %}section--flush{% endunless %}">
  <div {% if is_boxed %}class="container"{% endif %}>
    <div class="section__color-wrapper {% if is_boxed %}section__color-wrapper--boxed{% endif %}">
      <div class="{% unless is_boxed %}container{% endunless %} {% unless blends_with_background %}vertical-breather{% endunless %}">
		
    		<h2>{{section.settings.heading}}</h2>
    		<p>{{section.settings.main_description}}</p>

        <div class="color-container" id="color-container">
    		  <!-- main color -->  
    		</div>

    		<p class="next-tips">{{section.settings.sub_description}}</p>
    		  
    		<div id="sub-color-container">
          <!-- sub color -->
        </div>

      </div>
    </div>
  </div>
</section>
{% schema %}
{
  "name": "Cables Colors Layout",
  "class": "shopify-section--cables-colors-layout",
  "limit": 1,
  "disabled_on": {
    "groups": ["custom.overlay"]
  },
  "settings": [
    	{
        "type": "header",
        "content": "Main Color"
      },
      {
  	   "type": "text",
  	   "id": "heading",
  	   "label": "Heading"
  	  },
      {
       "type": "textarea",
       "id": "main_description",
       "label": "Main color description"
      },
      {
        "type": "header",
        "content": "Sub Color"
      },
      {
       "type": "textarea",
       "id": "sub_description",
       "label": "Sub color description"
      },
      {
          "type": "checkbox",
          "id": "add_vertical_spacing",
          "label": "Add vertical spacing",
          "default": true
      },
      {
          "type": "select",
          "id": "background_type",
          "label": "Background",
          "options": [
            {
              "value": "full_width",
              "label": "Full width"
            },
            {
              "value": "boxed",
              "label": "Boxed"
            }
          ],
          "default": "full_width"
      },
      {
        "type": "header",
        "content": "Colors"
      },
      {
        "type": "color",
        "id": "background",
        "label": "Background",
        "default": "rgba(0,0,0,0)"
      },
      {
        "type": "color",
        "id": "text_color",
        "label": "Text color",
        "default": "rgba(0,0,0,0)"
      }
  ],
  "presets": [
    {
      "name": "Cables Colors Layout"
    }
  ]
}
{% endschema %}